name: test_v1_tutorials

on:
  schedule:
    # Runs at 00:00 UTC every day
    - cron: "0 0 * * *"
  push:
    branches:
      - main
  # Allow manual triggering
  workflow_dispatch:

permissions:
  id-token: write # This is required for requesting the JWT
  contents: write # This is required for actions/checkout

jobs:
  run-pendle:
    runs-on: ubuntu-latest
    env:
      COMPASS_API_KEY: ${{ secrets.COMPASS_API_KEY }}
      PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
      ARBITRUM_RPC_URL: ${{ secrets.ARBITRUM_RPC_URL }}
      SERVER_URL: http://localhost:8000
      PENDLE_API_URL: https://api-v2.pendle.finance
      MORPHO_GRAPHQL_API_URL: https://blue-api.morpho.org/graphql
      THE_GRAPH_URL_AAVE_ARBITRUM: https://gateway.thegraph.com/api/subgraphs/id/DLu
      THE_GRAPH_URL_AAVE_ETHEREUM: https://gateway.thegraph.com/api/subgraphs/id/Cd2gED
      THE_GRAPH_URL_AAVE_BASE: https://gateway.thegraph.com/api/subgraphs/id/GQFb
      THE_GRAPH_API_KEY: 815da
      ENV: "production"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: PWD
        working-directory: v1/pendle/typescript
        run: pwd

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          cache: false

      # - name: Anvil Fork Base
      #   run: |
      #     anvil \
      #     --block-time 0.05 \
      #     --hardfork prague \
      #     --host 0.0.0.0 \
      #     --fork-url ${{ secrets.ETHEREUM_RPC_URL }} \
      #     --port 8546 \
      #     --chain-id 1 \
      #     --no-rate-limit &
      #     # Wait for Anvil to be ready
      #     until curl -s http://localhost:8546 >/dev/null; do sleep 1; done
      #     echo "Anvil is running"

      # - name: Anvil Fork Base
      #   run: |
      #     anvil \
      #     --block-time 0.05 \
      #     --hardfork prague \
      #     --host 0.0.0.0 \
      #     --fork-url ${{ secrets.ARBITRUM_RPC_URL }} \
      #     --port 8547 \
      #     --chain-id 42161 \
      #     --no-rate-limit &
      #     # Wait for Anvil to be ready
      #     until curl -s http://localhost:8547 >/dev/null; do sleep 1; done
      #     echo "Anvil is running"

      # - name: Anvil Fork Base
      #   run: |
      #     anvil \
      #     --block-time 0.05 \
      #     --hardfork prague \
      #     --host 0.0.0.0 \
      #     --fork-url ${{ secrets.BASE_RPC_URL }} \
      #     --port 8548 \
      #     --chain-id 8546 \
      #     --no-rate-limit &
      #     # Wait for Anvil to be ready
      #     until curl -s http://localhost:8548 >/dev/null; do sleep 1; done
      #     echo "Anvil is running"

      - name: Anvil Fork Ethereum
        run: |
          anvil \
          --block-time 0.05 \
          --hardfork prague \
          --host 0.0.0.0 \
          --fork-url ${{ secrets.ETHEREUM_MAINNET_RPC_URL }} \
          --port 8545 \
          --chain-id 1 \
          --no-rate-limit &

      - name: Anvil Fork Arbitrum
        run: |
          anvil \
          --block-time 0.05 \
          --hardfork prague \
          --host 0.0.0.0 \
          --fork-url ${{ secrets.ARBITRUM_MAINNET_RPC_URL }} \
          --port 8547 \
          --chain-id 42161 \
          --no-rate-limit &

      - name: Anvil Fork Base
        run: |
          anvil \
          --block-time 0.05 \
          --hardfork prague \
          --host 0.0.0.0 \
          --fork-url ${{ secrets.BASE_MAINNET_RPC_URL }} \
          --port 8546 \
          --chain-id 8453 \
          --no-rate-limit &
          sleep 5

      - name: Fund Wallet with 10 ETH
        run: |
          # Derive the wallet address from the private key
          WALLET_ADDRESS=$(cast wallet address --private-key ${{ secrets.PRIVATE_KEY }})
          echo "Funding wallet: $WALLET_ADDRESS"

          # Set balance to 10 ETH
          cast rpc anvil_setBalance $WALLET_ADDRESS 10000000000000000000 --rpc-url http://localhost:8546 || {
            echo "Error: Failed to set balance"
            exit 1
          }
          echo "Wallet funded with 10 ETH"

      - name: Verify Wallet Balance
        run: |
          # Derive the wallet address from the private key
          WALLET_ADDRESS=$(cast wallet address --private-key ${{ secrets.PRIVATE_KEY }})
          # Check the balance of the EOA
          BALANCE=$(cast balance $WALLET_ADDRESS --rpc-url http://localhost:8546)
          echo "Wallet balance: $BALANCE wei"
          # Convert to ETH for readability (using bc for calculation)
          BALANCE_ETH=$(echo "scale=2; $BALANCE / 1000000000000000000" | bc)
          echo "Wallet balance: $BALANCE_ETH ETH"
          # Verify the balance is as expected using bc
          if [ $(echo "$BALANCE >= 10000000000000000000" | bc) -eq 1 ]; then
            echo "Balance verification passed: Wallet has sufficient ETH"
          else
            echo "Balance verification failed: Wallet balance is less than expected"
            exit 1
          fi

      - name: Generate GitHub App Token
        id: generate_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.MONOREPOAPP_ID }}
          private_key: ${{ secrets.MONOREPOAPP_PRIVATE_KEY }}

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.generate_token.outputs.token }}
          repository: "CompassLabs/mono"
          path: "mono"

      - name: list current folder
        run: ls

      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Start API
        working-directory: mono/api
        env:
          ETHEREUM_MAINNET_RPC_URL: http://localhost:8545
          ARBITRUM_MAINNET_RPC_URL: http://localhost:8547
          BASE_MAINNET_RPC_URL: http://localhost:8546
        run: |
          make install && make run &
          # Wait for API to be ready
          until curl -s http://localhost:8000/health >/dev/null; do sleep 1; done
          echo "API is running"

      - name: Wait
        run: sleep 5

      - name: Install dependencies
        working-directory: v1/pendle/typescript
        run: npm install

      - name: Build application
        working-directory: v1/pendle/typescript
        run: npm run build

      - name: Run application
        working-directory: v1/pendle/typescript
        env:
          RPC_URL: http://localhost:8547
        run: npm run start

  failure_alert:
    if: failure() && github.event_name == 'schedule'
    runs-on: ubuntu-latest
    needs: [run-pendle]
    steps:
      - name: Send failure notification
        run: |
          curl -X POST "https://allquiet.app/api/webhook/829f846c-4dfa-4a58-ab33-eafae34a57c9" \
               -H "Content-Type: application/json" \
               -d '{"status": "Open", "severity": "Critical", "message": "GitHub workflow failed", "run_url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"}'
