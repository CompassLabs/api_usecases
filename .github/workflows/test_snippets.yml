name: Smoke test code samples (parallel)

on:
  schedule:
    - cron: "0 0 * * *"     # daily at 00:00 UTC
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  discover:
    runs-on: ubuntu-latest
    outputs:
      paths: ${{ steps.collect.outputs.paths }}
      count: ${{ steps.collect.outputs.count }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Collect endpoints from spec (minus BROKEN)
        id: collect
        env:
          API_URL: "https://spec.speakeasy.com/compasslabs/api/compass-api-with-code-samples"
        run: |
          python - <<'PY'
import json, os, requests, sys
API_URL = os.environ["API_URL"]

# Hard-coded BROKEN
BROKEN = {
    "/v0/aave/supply",
    "/v0/aave/borrow",
    "/v0/aave/repay",
    "/v0/aave/withdraw",
    "/v0/aave/historical_transactions/get",
    "/v0/aerodrome_slipstream/swap/sell_exactly",
    "/v0/aerodrome_slipstream/swap/buy_exactly",
    "/v0/aerodrome_slipstream/liquidity_provision/mint",
}

def fetch_spec(url: str):
    r = requests.get(url, timeout=(5,30))
    r.raise_for_status()
    return r.json()

def has_python_sample(method_obj: dict) -> bool:
    samples = (method_obj or {}).get("x-codeSamples") or []
    for s in samples:
        lang = (s.get("lang") or "").lower()
        if lang.startswith("python"):
            return True
    return False

spec = fetch_spec(API_URL)
paths = []
for p, methods in (spec.get("paths") or {}).items():
    if p in BROKEN:
        continue
    if any(has_python_sample(methods.get(m, {})) for m in ("get","post")):
        paths.append(p)

# Cap to matrix limit (256 entries)
paths = paths[:256]

matrix = {"path": paths}
print(f"Discovered {len(paths)} runnable paths")
with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
    fh.write(f"paths={json.dumps(matrix)}\n")
    fh.write(f"count={len(paths)}\n")
PY

      - name: Echo matrix (debug)
        run: |
          echo "Discovered ${{ steps.collect.outputs.count }} paths"
          echo '${{ steps.collect.outputs.paths }}'

  run-endpoint:
    needs: discover
    if: ${{ fromJson(needs.discover.outputs.paths).path && fromJson(needs.discover.outputs.paths).path[0] != '' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 20                 # tune if you hit rate-limits
      matrix: ${{ fromJson(needs.discover.outputs.paths) }}
    env:
      API_URL: "https://spec.speakeasy.com/compasslabs/api/compass-api-with-code-samples"
      COMPASS_API_KEY: ${{ secrets.COMPASS_API_KEY }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install requests python-dotenv

      - name: Execute code sample for ${{ matrix.path }}
        timeout-minutes: 10
        env:
          path: ${{ matrix.path }}
        run: |
          python - <<'PY'
          import os, requests, sys

          API_URL = os.environ["API_URL"]
          PATH = os.environ["path"]
          API_KEY = os.environ.get("COMPASS_API_KEY")
          if not API_KEY:
              print("Missing COMPASS_API_KEY (set as a repository secret).", file=sys.stderr)
              sys.exit(1)

          def fetch_spec(url: str):
              r = requests.get(url, timeout=(5,30))
              r.raise_for_status()
              return r.json()

          def first_python_sample(spec, path: str) -> str:
              methods = spec["paths"][path]
              for m in ("get","post"):
                  samples = (methods.get(m, {}) or {}).get("x-codeSamples") or []
                  for s in samples:
                      if (s.get("lang") or "").lower().startswith("python"):
                          return s["source"]
              raise RuntimeError(f"No Python code sample for {path}")

          spec = fetch_spec(API_URL)
          code = first_python_sample(spec, PATH).replace("<YOUR_API_KEY_HERE>", API_KEY)

          # Isolated globals
          globs = {"__name__": "__main__"}

          print(f"--- Running sample for {PATH} ---")
          try:
              exec(compile(code, filename=f"<sample:{PATH}>", mode="exec"), globs, None)
              print(f"✅ PASS: {PATH}")
          except Exception as e:
              print(f"❌ FAIL: {PATH} - {e}", file=sys.stderr)
              raise
          PY